; @author: Ruturaj A. Nanoti
; @brief: This code generates a PWM signal with 10KHz frequency. Here, the clock for the PIO
; is divided by 125, to get the PIO running at 1MHz.

;             ______________
; ___________|             
;{    50 us  }{     50us    }

.program sound_pwm
.side_set 1 opt

    pull noblock
    mov x, osr
    mov y, isr
gen_signal_low:
    jmp x-- gen_signal_low  side 0
gen_signal_high:
    jmp y-- gen_signal_high side 1


% c-sdk {
static inline void sound_pwm_program_init(PIO pio, uint sm, uint offset, uint pin) {

    // creates state machine configuration object c, sets
    // to default configurations. I believe this function is auto-generated
    // and gets a name of <program name>_program_get_default_config
    // Yes, page 40 of SDK guide
    pio_sm_config c = sound_pwm_program_get_default_config(offset);

    // Map the state machine's SET pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, pin, 1);

    // Set clock division (div by 125 for 1 MHz state machine)
    sm_config_set_clkdiv(&c, 125);

    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // Set the state machine running
    // pio_sm_set_enabled(pio, sm, true);
}
%}
